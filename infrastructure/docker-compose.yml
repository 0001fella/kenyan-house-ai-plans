
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: jmss_db
    environment:
      POSTGRES_DB: jmss_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jmss123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - jmss_network

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: jmss_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jmss_network

  # Django Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: jmss_backend
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=jmss_db
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-jmss123}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=jmss.settings.production
    volumes:
      - ../backend:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - jmss_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: jmss_celery_worker
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=jmss_db
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-jmss123}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=jmss.settings.production
    volumes:
      - ../backend:/app
      - ../ai_models:/app/ai_models
    depends_on:
      - db
      - redis
    networks:
      - jmss_network
    command: celery -A jmss worker -l info

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: jmss_celery_beat
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=jmss_db
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-jmss123}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=jmss.settings.production
    volumes:
      - ../backend:/app
    depends_on:
      - db
      - redis
    networks:
      - jmss_network
    command: celery -A jmss beat -l info

  # React Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: jmss_frontend
    environment:
      - REACT_APP_API_URL=http://backend:8000/api
      - REACT_APP_ENV=production
    volumes:
      - ../frontend:/app
      - frontend_build:/app/build
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - jmss_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jmss_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_files:/var/www/static
      - media_files:/var/www/media
      - frontend_build:/var/www/frontend
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - jmss_network

  # AI Model Server (FastAPI)
  ai-server:
    build:
      context: ../ai_models
      dockerfile: Dockerfile
    container_name: jmss_ai_server
    environment:
      - MODEL_PATH=/app/generative_design/models/residential_kenya.pt
      - CONFIG_PATH=/app/generative_design/config.json
      - DEVICE=cpu
    volumes:
      - ../ai_models:/app
    ports:
      - "8001:8001"
    networks:
      - jmss_network
    command: uvicorn main:app --host 0.0.0.0 --port 8001

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: jmss_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - jmss_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: jmss_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - jmss_network

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:
  frontend_build:
  prometheus_data:
  grafana_data:

networks:
  jmss_network:
    driver: bridge
